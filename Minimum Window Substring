import java.util.HashMap;


class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() < t.length()) return "";


        HashMap<Character, Integer> tMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }


        int left = 0, right = 0;
        int minLength = Integer.MAX_VALUE;
        int start = 0;
        int matched = 0;


        HashMap<Character, Integer> windowMap = new HashMap<>();


        while (right < s.length()) {
            char c = s.charAt(right);
            windowMap.put(c, windowMap.getOrDefault(c, 0) + 1);


            if (tMap.containsKey(c) && windowMap.get(c).intValue() == tMap.get(c).intValue()) {
                matched++;
            }


            while (matched == tMap.size()) {
                if (right - left + 1 < minLength) {
                    minLength = right - left + 1;
                    start = left;
                }


                char leftChar = s.charAt(left);
                windowMap.put(leftChar, windowMap.get(leftChar) - 1);
                if (tMap.containsKey(leftChar) && windowMap.get(leftChar).intValue() < tMap.get(leftChar).intValue()) {
                    matched--;
                }
                left++;
            }


            right++;
        }


        return minLength == Integer.MAX_VALUE ? "" : s.substring(start, start + minLength);
    }
}
